###
# Makefile: builds the Nessie OCR
#
# Copyright (C) 2008 Eliezer Talon <elitalon@gmail.com>
#
# Usage: make [ main | all | clean ]
#	- main:		Compiles the source code, default option
#	- clean:	Removes every file generated during compilation
#	- all:		Executes clean and then main
#
###


# Directories
SRC=src/
BIN=bin/
INC=inc/
LIB=lib/
DOC=doc/

# Magick++ API flags
MAGICK=`Magick++-config --cppflags --cxxflags --ldflags --libs`

# Flex and Bison source files
FLEX_SRC=$(SRC)lexico.l
BISON_SRC=$(SRC)sintactico.y


# Source files generated by Flex and Bison
FLEX_OUT=$(SRC)lex.yy.c
SINTACTICO_SRC=$(SRC)sintactico.tab.c
SINTACTICO_LIB=$(LIB)sintactico.tab.h


# Source files of 'symbol_table' module
SYMBOL_TABLE_SRC=$(SRC)symbol_table.c
SYMBOL_TABLE_LIB=$(LIB)symbol_table.h


# Source files of 'gestion_memoria' module
GESTION_MEMORIA_SRC=$(SRC)gestion_memoria.c
GESTION_MEMORIA_LIB=$(LIB)gestion_memoria.h


# Source files of 'Qlib' module
QLIB_SRC=$(SRC)Qlib.c
QLIB_LIB=$(LIB)Qlib.h


# Object files
FLEX_OBJ=$(SRC)lex.yy.o
SINTACTICO_OBJ=$(SRC)sintactico.tab.o
SYMBOL_TABLE_OBJ=$(SRC)symbol_table.o
GESTION_MEMORIA_OBJ=$(SRC)gestion_memoria.o
QLIB_OBJ=$(SRC)Qlib.o


# Dependencies
SYMBOL_TABLE=$(SYMBOL_TABLE_LIB) $(SYMBOL_TABLE_SRC)
GESTION_MEMORIA=$(GESTION_MEMORIA_LIB) $(GESTION_MEMORIA_SRC)
SINTACTICO=$(SINTACTICO_LIB) $(SINTACTICO_SRC)
QLIB=$(QLIB_LIB) $(QLIB_SRC)


# Final object files
OBJECTS=$(FLEX_OBJ) $(SYMBOL_TABLE_OBJ) $(GESTION_MEMORIA_OBJ) $(SINTACTICO_OBJ) 
IQ=$(SRC)IQ.o $(QLIB_OBJ)


# Compiler options
EXECUTABLE=$(BIN)lagarto
IQ_EXECUTABLE=$(BIN)IQ
FLAGS=-Wall -O2 -Iinclude/


# Temporal rule
test: $(SRC)main.cpp
	@printf "** Linking and building 'Nessie OCR'...\n"
	@g++ $(SRC)main.cpp $(FLAGS) $(MAGICK) -o test
	@printf "** Done!\n"

# Main rule
main: $(OBJECTS)
	@printf "** Linking and building 'Nessie OCR' **\n"
	@cc $(OBJECTS) $(FLAGS) -I$(LIB) -lfl -o $(EXECUTABLE)
	@printf "\n"


$(FLEX_OBJ): $(FLEX_OUT) $(SINTACTICO_OBJ)
	@printf "** Compiling '$(FLEX_OUT)' (generated by Flex) **\n"
	@cc $(FLAGS) -c -I$(LIB) $(FLEX_OUT) 
	@mv lex.yy.o $(SRC)
	@printf "\n"


$(FLEX_OUT): $(FLEX_SRC) 
	@printf "** Analyzing '$(FLEX_SRC)' with Flex **\n"
	@flex $(FLEX_SRC)
	@mv lex.yy.c $(SRC)
	@printf "\n"

$(SINTACTICO_OBJ): $(SINTACTICO_SRC)
	@printf "** Compiling '$(SINTACTICO_SRC)' (generated by Bison) **\n"
	@cc $(FLAGS) -c -I$(LIB) $(SINTACTICO_SRC) 
	@mv sintactico.tab.o $(SRC)
	@printf "\n"

$(SINTACTICO_SRC): $(BISON_SRC)
	@printf "** Analyzing '$(BISON_SRC)' with Bison **\n"
	@bison -d $(BISON_SRC) 
	@mv sintactico.tab.c $(SRC)
	@mv sintactico.tab.h $(LIB)
	@printf "\n"

$(SYMBOL_TABLE_OBJ): $(SYMBOL_TABLE)
	@printf "** Compiling the module 'symbol_table' **\n"
	@cc $(FLAGS) -c -I$(LIB) $(SYMBOL_TABLE_SRC) 
	@mv symbol_table.o $(SRC)
	@printf "\n"

$(GESTION_MEMORIA_OBJ): $(SYMBOL_TABLE_OBJ) $(GESTION_MEMORIA)
	@printf "** Compiling the module 'gestion_memoria' **\n"
	@cc $(FLAGS) -c -I$(LIB) $(GESTION_MEMORIA_SRC) 
	@mv gestion_memoria.o $(SRC)
	@printf "\n"


# IQ interpreter rule
iq: $(IQ)
	@printf "** Linking and building the Q interpreter IQ **\n"
	@cc $(IQ) $(FLAGS) -I$(LIB) -lfl -o $(IQ_EXECUTABLE)
	@ln -sf ../$(LIB)Qlib.h $(BIN)
	@printf "\n"

$(QLIB_OBJ): $(QLIB)
	@printf "** Compiling the 'Qlib' module **\n"
	@cc $(FLAGS) -c -I$(LIB) $(QLIB_SRC) 
	@mv Qlib.o $(SRC)
	@printf "\n"

# Makes everything
all: clean iq main


# Deletes everything
clean:
	@printf "\nRemoving object and executable files"
	@$(SRC)clean.pl $(SRC)*.o $(EXECUTABLE) $(IQ_EXECUTABLE) 
	@printf "Removing source files"
	@$(SRC)clean.pl $(SINTACTICO) $(FLEX_OUT)
	@printf "Removing Vim backup files"
	@$(SRC)clean.pl *~ $(SRC)*~ $(LIB)*~ $(BIN)*~
	@printf "Removing Q source files"
	@$(SRC)clean.pl $(BIN)*.q.c *.q.c
	@printf "Removing symbolic links"
	@$(SRC)clean.pl $(BIN)Qlib.h
	@printf "Restoring permissions"
	@$(SRC)restorePermissions.pl $(BIN)*.adb $(SRC)*.y $(SRC)*.c $(SRC)*.l $(LIB)*.h
